{"version":3,"sources":["components/Question.js","App.js","reportWebVitals.js","index.js"],"names":["Question","question","useState","answered","setAnswered","result","setResult","style","display","marginLeft","marginRight","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","answerChoices","push","correct_answer","j","incorrect_answers","storeChoices","map","choice","paddingBottom","Button","color","disabled","disableElevation","variant","onClick","console","log","App","questions","setQuestions","useEffect","fetch","then","res","json","results","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAgFeA,MA7Ef,YAAiC,IAAbC,EAAY,EAAZA,SAAY,EAGEC,oBAAS,GAHX,mBAGvBC,EAHuB,KAGbC,EAHa,OAKFF,mBAAS,IALP,mBAKvBG,EALuB,KAKfC,EALe,KAsC9B,OACE,gCACE,6BAAKL,EAASA,WACd,6BAAKI,IACL,qBACEE,MAAO,CACLC,QAAS,QACTC,WAAY,OACZC,YAAa,QAJjB,SAxBJ,SAAiBC,GAMf,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAcFQ,CA1Cc,SAAClB,GACpB,IAAImB,EAAgB,GAEpBA,EAAcC,KAAKpB,EAASqB,gBAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAASuB,kBAAkBT,OAAQQ,IACrDH,EAAcC,KAAKpB,EAASuB,kBAAkBD,IAEhD,OAAOH,EAmCMK,CAAaxB,IAAWyB,KAAI,SAACC,GAAD,OAGnC,aAFA,CAEA,OAAKpB,MAAO,CAAEqB,cAAe,IAA7B,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,SAAU5B,EACV6B,kBAAgB,EAChBC,QAAQ,YACRC,QAAS,WACP9B,GAAY,GACRuB,IAAW1B,EAASqB,gBACtBhB,EAAU,UACV6B,QAAQC,IAAI,YAEZ9B,EAAU,gCAAwBL,EAASqB,iBAXjD,SAeGK,e,MC7CAU,MArBf,WAAgB,IAAD,EACqBnC,mBAAS,IAD9B,mBACNoC,EADM,KACKC,EADL,KAWb,OARAC,qBAAU,WACRC,MAAM,yCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLJ,EAAaI,EAAIE,cAEpB,IAGD,qBAAKtC,MAAO,CAAEuC,UAAW,UAAzB,SACGR,EAAUZ,KAAI,SAACzB,GAAD,OAEb,aADA,CACC,EAAD,CAAUA,SAAUA,UCRb8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.103a239f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/button\";\n\nfunction Question({ question }) {\n  //   console.log(question);\n\n  const [answered, setAnswered] = useState(false);\n\n  const [result, setResult] = useState(\"\");\n\n  const storeChoices = (question) => {\n    let answerChoices = [];\n\n    answerChoices.push(question.correct_answer);\n    for (var j = 0; j < question.incorrect_answers.length; j++) {\n      answerChoices.push(question.incorrect_answers[j]);\n    }\n    return answerChoices;\n  };\n\n  //Credit for shuffle(): https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  function shuffle(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  return (\n    <div>\n      <h4>{question.question}</h4>\n      <h4>{result}</h4>\n      <div\n        style={{\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n      >\n        {shuffle(storeChoices(question)).map((choice) => (\n          // each of the shuffled choices are chosen to be created into a button\n          // shuffle(storeChoices(question)) is the answer choices for ONE question\n          <div style={{ paddingBottom: 10 }}>\n            <Button\n              color=\"primary\"\n              disabled={answered}\n              disableElevation\n              variant=\"contained\"\n              onClick={() => {\n                setAnswered(true);\n                if (choice === question.correct_answer) {\n                  setResult(\"âœ…\");\n                  console.log(\"correct\");\n                } else {\n                  setResult(\"ðŸŸ¥ Correct Answer: \" + question.correct_answer);\n                }\n              }}\n            >\n              {choice}\n            </Button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Question;\n","import React, { useState, useEffect } from \"react\";\nimport Question from \"./components/Question\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=10\")\n      .then((res) => res.json())\n      .then((res) => {\n        setQuestions(res.results);\n      });\n  }, []);\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {questions.map((question) => (\n        // each question starts here. (question is a question with all properties)\n        <Question question={question}></Question>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}